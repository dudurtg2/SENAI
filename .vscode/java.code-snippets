{
    "Spring REST Controller": {
        "prefix": "scontroller",
        "body": [
            "@RestController",
            "@RequestMapping(\"/api/v1/${1:resource}\")",
            "@RequiredArgsConstructor",
            "@Slf4j",
            "public class ${2:Resource}Controller {",
            "",
            "    private final ${3:Service} ${4:service};",
            "",
            "    @GetMapping",
            "    public ResponseEntity<List<${5:DTO}>> findAll() {",
            "        List<${5:DTO}> result = ${4:service}.findAll();",
            "        return ResponseEntity.ok(result);",
            "    }",
            "",
            "    @GetMapping(\"/{id}\")",
            "    public ResponseEntity<${5:DTO}> findById(@PathVariable UUID id) {",
            "        ${5:DTO} result = ${4:service}.findById(id);",
            "        return ResponseEntity.ok(result);",
            "    }",
            "",
            "    @PostMapping",
            "    public ResponseEntity<${5:DTO}> create(@RequestBody @Valid ${6:CreateDTO} dto) {",
            "        ${5:DTO} result = ${4:service}.create(dto);",
            "        return ResponseEntity.status(HttpStatus.CREATED).body(result);",
            "    }",
            "",
            "    @PutMapping(\"/{id}\")",
            "    public ResponseEntity<${5:DTO}> update(@PathVariable UUID id, @RequestBody @Valid ${7:UpdateDTO} dto) {",
            "        ${5:DTO} result = ${4:service}.update(id, dto);",
            "        return ResponseEntity.ok(result);",
            "    }",
            "",
            "    @DeleteMapping(\"/{id}\")",
            "    public ResponseEntity<Void> delete(@PathVariable UUID id) {",
            "        ${4:service}.delete(id);",
            "        return ResponseEntity.noContent().build();",
            "    }",
            "}"
        ],
        "description": "Create a complete Spring REST Controller with CRUD operations"
    },
    "Spring Service Use Case": {
        "prefix": "susecase",
        "body": [
            "@Service",
            "@RequiredArgsConstructor",
            "@Transactional",
            "@Slf4j",
            "public class ${1:Resource}UseCase {",
            "",
            "    private final ${2:Gateway} ${3:gateway};",
            "",
            "    public ${4:DTO} execute(${5:RequestDTO} request) {",
            "        log.info(\"Executing ${1:Resource} use case with: {}\", request);",
            "        ",
            "        // Validação de entrada",
            "        validateRequest(request);",
            "        ",
            "        // Lógica de negócio",
            "        $0",
            "        ",
            "        // Persistência e retorno",
            "        return result;",
            "    }",
            "",
            "    private void validateRequest(${5:RequestDTO} request) {",
            "        if (request == null) {",
            "            throw new IllegalArgumentException(\"Request cannot be null\");",
            "        }",
            "    }",
            "}"
        ],
        "description": "Create a Spring Service Use Case with validation"
    },
    "JPA Entity": {
        "prefix": "jentity",
        "body": [
            "@Entity",
            "@Table(name = \"${1:table_name}\")",
            "@Data",
            "@Builder",
            "@NoArgsConstructor",
            "@AllArgsConstructor",
            "public class ${2:Entity} {",
            "",
            "    @Id",
            "    @GeneratedValue(strategy = GenerationType.UUID)",
            "    private UUID uuid;",
            "",
            "    @Column(nullable = false, length = 255)",
            "    private String ${3:name};",
            "",
            "    @CreationTimestamp",
            "    @Column(name = \"criado_em\", nullable = false, updatable = false)",
            "    private LocalDateTime criadoEm;",
            "",
            "    @UpdateTimestamp",
            "    @Column(name = \"atualizado_em\")",
            "    private LocalDateTime atualizadoEm;",
            "",
            "    $0",
            "}"
        ],
        "description": "Create a JPA Entity with audit fields"
    },
    "Repository Interface": {
        "prefix": "jrepository",
        "body": [
            "@Repository",
            "public interface ${1:Entity}Repository extends JpaRepository<${1:Entity}, UUID> {",
            "",
            "    Optional<${1:Entity}> findBy${2:Property}(${3:String} ${4:property});",
            "",
            "    List<${1:Entity}> findBy${5:Property}ContainingIgnoreCase(${6:String} ${7:property});",
            "",
            "    boolean existsBy${2:Property}(${3:String} ${4:property});",
            "",
            "    $0",
            "}"
        ],
        "description": "Create a Spring Data JPA Repository"
    },
    "DTO Class": {
        "prefix": "dto",
        "body": [
            "@Data",
            "@Builder",
            "@NoArgsConstructor",
            "@AllArgsConstructor",
            "@JsonNaming(PropertyNamingStrategies.SnakeCaseStrategy.class)",
            "public class ${1:Resource}DTO {",
            "",
            "    private UUID uuid;",
            "",
            "    @NotBlank(message = \"${2:Name} é obrigatório\")",
            "    @Size(max = 255, message = \"${2:Name} deve ter no máximo 255 caracteres\")",
            "    private String ${3:name};",
            "",
            "    @JsonFormat(pattern = \"yyyy-MM-dd'T'HH:mm:ss\")",
            "    private LocalDateTime criadoEm;",
            "",
            "    @JsonFormat(pattern = \"yyyy-MM-dd'T'HH:mm:ss\")",
            "    private LocalDateTime atualizadoEm;",
            "",
            "    $0",
            "}"
        ],
        "description": "Create a DTO with validation annotations"
    },
    "MapStruct Mapper": {
        "prefix": "mapper",
        "body": [
            "@Mapper(componentModel = \"spring\")",
            "public interface ${1:Entity}Mapper {",
            "",
            "    ${1:Entity}Mapper INSTANCE = Mappers.getMapper(${1:Entity}Mapper.class);",
            "",
            "    ${2:DTO} toDTO(${1:Entity} entity);",
            "",
            "    ${1:Entity} toEntity(${3:CreateDTO} dto);",
            "",
            "    List<${2:DTO}> toDTOList(List<${1:Entity}> entities);",
            "",
            "    @BeanMapping(nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE)",
            "    void updateEntityFromDTO(${4:UpdateDTO} dto, @MappingTarget ${1:Entity} entity);",
            "",
            "    $0",
            "}"
        ],
        "description": "Create a MapStruct Mapper interface"
    },
    "Exception Handler": {
        "prefix": "exhandler",
        "body": [
            "@RestControllerAdvice",
            "@Slf4j",
            "public class ${1:Global}ExceptionHandler {",
            "",
            "    @ExceptionHandler(EntityNotFoundException.class)",
            "    @ResponseStatus(HttpStatus.NOT_FOUND)",
            "    public ErrorResponse handleEntityNotFound(EntityNotFoundException ex) {",
            "        log.error(\"Entity not found: {}\", ex.getMessage());",
            "        return ErrorResponse.builder()",
            "                .status(HttpStatus.NOT_FOUND.value())",
            "                .message(ex.getMessage())",
            "                .timestamp(LocalDateTime.now())",
            "                .build();",
            "    }",
            "",
            "    @ExceptionHandler(IllegalArgumentException.class)",
            "    @ResponseStatus(HttpStatus.BAD_REQUEST)",
            "    public ErrorResponse handleIllegalArgument(IllegalArgumentException ex) {",
            "        log.error(\"Invalid argument: {}\", ex.getMessage());",
            "        return ErrorResponse.builder()",
            "                .status(HttpStatus.BAD_REQUEST.value())",
            "                .message(ex.getMessage())",
            "                .timestamp(LocalDateTime.now())",
            "                .build();",
            "    }",
            "",
            "    @ExceptionHandler(MethodArgumentNotValidException.class)",
            "    @ResponseStatus(HttpStatus.BAD_REQUEST)",
            "    public ErrorResponse handleValidation(MethodArgumentNotValidException ex) {",
            "        Map<String, String> errors = new HashMap<>();",
            "        ex.getBindingResult().getFieldErrors().forEach(error -> ",
            "                errors.put(error.getField(), error.getDefaultMessage()));",
            "        ",
            "        return ErrorResponse.builder()",
            "                .status(HttpStatus.BAD_REQUEST.value())",
            "                .message(\"Validation failed\")",
            "                .errors(errors)",
            "                .timestamp(LocalDateTime.now())",
            "                .build();",
            "    }",
            "",
            "    $0",
            "}"
        ],
        "description": "Create an Exception Handler with common exceptions"
    },
    "Test Class": {
        "prefix": "test",
        "body": [
            "@ExtendWith(MockitoExtension.class)",
            "class ${1:Class}Test {",
            "",
            "    @Mock",
            "    private ${2:Dependency} ${3:dependency};",
            "",
            "    @InjectMocks",
            "    private ${1:Class} ${4:instance};",
            "",
            "    @Test",
            "    @DisplayName(\"${5:Should do something when valid input}\")",
            "    void ${6:shouldDoSomething_WhenValidInput}() {",
            "        // Given",
            "        $0",
            "        ",
            "        // When",
            "        ",
            "        // Then",
            "        assertThat(result).isNotNull();",
            "    }",
            "",
            "    @Test",
            "    @DisplayName(\"Should throw exception when invalid input\")",
            "    void shouldThrowException_WhenInvalidInput() {",
            "        // Given",
            "        ",
            "        // When & Then",
            "        assertThatThrownBy(() -> ${4:instance}.someMethod(null))",
            "                .isInstanceOf(IllegalArgumentException.class)",
            "                .hasMessage(\"Expected error message\");",
            "    }",
            "}"
        ],
        "description": "Create a test class with Mockito"
    }
}