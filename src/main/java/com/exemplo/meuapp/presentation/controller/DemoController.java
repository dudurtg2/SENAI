package com.exemplo.meuapp.presentation.controller;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;

/**
 * Controller de demonstra√ß√£o para o Swagger/OpenAPI
 * 
 * @author Time SENAI
 * @version 1.0
 */
@RestController
@RequestMapping("/api/v1/demo")
@Tag(
    name = "üß™ Demonstra√ß√£o", 
    description = "Endpoints de demonstra√ß√£o para testar a API - n√£o requerem autentica√ß√£o"
)
public class DemoController {    @GetMapping("/health")
    @Operation(
        summary = "‚ù§Ô∏è Health Check da API",
        description = """
            **Verifica se a API est√° funcionando corretamente.**
            
            **Use este endpoint para:**
            - Testar conectividade com a API
            - Verificar se o servi√ßo est√° online
            - Obter informa√ß√µes b√°sicas do sistema
            
            **Resposta:** Status da aplica√ß√£o e links √∫teis
            """
    )
    @ApiResponse(
        responseCode = "200",
        description = "‚úÖ API funcionando normalmente",
        content = @Content(
            examples = @ExampleObject(
                value = """
                {
                  "status": "UP",
                  "timestamp": "2025-06-19T00:47:30.123456",
                  "message": "üöÄ API SENAI est√° funcionando!",
                  "swagger": "‚úÖ Dispon√≠vel em http://localhost:8080/swagger-ui.html"
                }
                """
            )
        )
    )
    public ResponseEntity<Map<String, Object>> healthCheck() {
        return ResponseEntity.ok(Map.of(
            "status", "UP",
            "timestamp", LocalDateTime.now(),
            "message", "üöÄ API SENAI est√° funcionando!",
            "swagger", "‚úÖ Dispon√≠vel em http://localhost:8080/swagger-ui.html"
        ));
    }    @GetMapping("/projetos")
    @Operation(
        summary = "üìã Listar projetos de demonstra√ß√£o",
        description = """
            **Retorna uma lista de projetos fict√≠cios para demonstra√ß√£o.**
            
            **√ötil para:**
            - Testar a estrutura de resposta da API
            - Visualizar formato de dados de projetos
            - Demonstrar funcionalidades sem dados reais
            
            **Dados:** Lista com projetos de exemplo com diferentes status
            """
    )
    @ApiResponse(
        responseCode = "200",
        description = "‚úÖ Lista de projetos retornada com sucesso",
        content = @Content(
            examples = @ExampleObject(
                value = """
                [
                  {
                    "id": "123e4567-e89b-12d3-a456-426614174000",
                    "nome": "Sistema de Gest√£o Acad√™mica",
                    "autor": "Jo√£o Silva",
                    "tecnologias": ["Java", "Spring Boot", "PostgreSQL"],
                    "status": "Publicado"
                  },
                  {
                    "id": "123e4567-e89b-12d3-a456-426614174001",
                    "nome": "App Mobile para Biblioteca",
                    "autor": "Maria Santos",
                    "tecnologias": ["React Native", "Node.js", "MongoDB"],
                    "status": "Em Desenvolvimento"
                  }
                ]
                """
            )
        )
    )
    public ResponseEntity<List<Map<String, Object>>> listarProjetos() {
        List<Map<String, Object>> projetos = List.of(
            Map.of(
                "id", UUID.randomUUID(),
                "nome", "Sistema de Gest√£o Acad√™mica",
                "autor", "Jo√£o Silva",
                "tecnologias", List.of("Java", "Spring Boot", "PostgreSQL"),
                "status", "Publicado"
            ),
            Map.of(
                "id", UUID.randomUUID(),
                "nome", "App Mobile para Biblioteca", 
                "autor", "Maria Santos",
                "tecnologias", List.of("React Native", "Node.js", "MongoDB"),
                "status", "Em Desenvolvimento"
            )
        );
        
        return ResponseEntity.ok(projetos);
    }    @PostMapping("/projetos")
    @Operation(
        summary = "‚ûï Criar projeto de demonstra√ß√£o",
        description = """
            **Simula a cria√ß√£o de um novo projeto no sistema.**
            
            **Como usar:**
            - Envie apenas o nome do projeto
            - O sistema gerar√° automaticamente: ID, autor, status e data
            
            **Resposta:** Dados do projeto criado com informa√ß√µes geradas
            """
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "201",
            description = "‚úÖ Projeto criado com sucesso",
            content = @Content(
                examples = @ExampleObject(
                    value = """
                    {
                      "id": "123e4567-e89b-12d3-a456-426614174000",
                      "nome": "Meu Projeto Teste",
                      "autor": "Usu√°rio Atual",
                      "status": "Rascunho",
                      "criadoEm": "2025-06-19T00:47:30.123456",
                      "message": "‚úÖ Projeto criado com sucesso!"
                    }
                    """
                )
            )
        )
    })
    public ResponseEntity<Map<String, Object>> criarProjeto(
        @Parameter(
            description = "Dados do projeto a ser criado",
            required = true,
            content = @Content(
                examples = @ExampleObject(
                    name = "Exemplo de projeto",
                    value = """
                    {
                      "nome": "Meu Projeto Incr√≠vel"
                    }
                    """
                )
            )
        )
        @RequestBody Map<String, Object> projeto
    ) {
        Map<String, Object> novoProjeto = Map.of(
            "id", UUID.randomUUID(),
            "nome", projeto.get("nome"),
            "autor", "Usu√°rio Atual",
            "status", "Rascunho",
            "criadoEm", LocalDateTime.now(),
            "message", "‚úÖ Projeto criado com sucesso!"
        );
        
        return ResponseEntity.status(201).body(novoProjeto);
    }

    @GetMapping("/projetos/{id}")
    public ResponseEntity<Map<String, Object>> buscarProjeto(@PathVariable UUID id) {
        Map<String, Object> projeto = Map.of(
            "id", id,
            "nome", "Sistema de Gest√£o Acad√™mica",
            "descricao", "Projeto para gerenciar matr√≠culas, notas e frequ√™ncia",
            "autor", "Jo√£o Silva",
            "tecnologias", List.of("Java 21", "Spring Boot 3", "PostgreSQL", "React"),
            "status", "Publicado",
            "criadoEm", LocalDateTime.now().minusDays(30),
            "atualizadoEm", LocalDateTime.now().minusDays(2)
        );
          return ResponseEntity.ok(projeto);
    }
}
